AWSTemplateFormatVersion: '2010-09-09'
Description: Shah Assignment 3 - AWS ECS Fargate Deployment with CI/CD (Updated for Final Test)

Parameters:
  GitHubOwner:
    Type: String
    Description: Your GitHub username
  GitHubRepo:
    Type: String
    Default: final
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch name
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token (store in AWS Secrets Manager or provide manually)

Resources:
  # --- VPC ---
  ShahVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: shah-vpc

  ShahPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShahVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: shah-public-subnet-1

  ShahPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShahVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: shah-public-subnet-2

  ShahPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShahVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: shah-private-subnet-1

  ShahPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShahVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: shah-private-subnet-2

  ShahInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: shah-igw

  ShahVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ShahVPC
      InternetGatewayId: !Ref ShahInternetGateway

  ShahPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ShahVPC
      Tags:
        - Key: Name
          Value: shah-public-rt

  ShahPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: ShahVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref ShahPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ShahInternetGateway

  ShahPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ShahPublicSubnet1
      RouteTableId: !Ref ShahPublicRouteTable

  ShahPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ShahPublicSubnet2
      RouteTableId: !Ref ShahPublicRouteTable

  ShahPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ShahVPC
      Tags:
        - Key: Name
          Value: shah-private-rt

  ShahNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ShahNATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: ShahVPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt ShahNATGatewayEIP.AllocationId
      SubnetId: !Ref ShahPublicSubnet1
      Tags:
        - Key: Name
          Value: shah-nat

  ShahPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: ShahNATGateway
    Properties:
      RouteTableId: !Ref ShahPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ShahNATGateway

  ShahPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ShahPrivateSubnet1
      RouteTableId: !Ref ShahPrivateRouteTable

  ShahPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ShahPrivateSubnet2
      RouteTableId: !Ref ShahPrivateRouteTable

  # --- Security Groups ---
  ShahALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Shah ALB
      VpcId: !Ref ShahVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: shah-alb-sg

  ShahECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Shah ECS tasks
      VpcId: !Ref ShahVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref ShahALBSecurityGroup
      Tags:
        - Key: Name
          Value: shah-ecs-sg

  # --- Application Load Balancer ---
  ShahLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - ShahPublicSubnet1
      - ShahPublicSubnet2
    Properties:
      Name: shah-alb
      Subnets:
        - !Ref ShahPublicSubnet1
        - !Ref ShahPublicSubnet2
      SecurityGroups:
        - !Ref ShahALBSecurityGroup
      Scheme: internet-facing
      Type: application

  ShahTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: shah-tg
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref ShahVPC
      TargetType: ip
      HealthCheckPath: /

  ShahListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ShahLoadBalancer
      - ShahTargetGroup
    Properties:
      LoadBalancerArn: !Ref ShahLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ShahTargetGroup

  # --- ECS Cluster ---
  ShahECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: shah-ecs-cluster

  # --- ECS Task Definition ---
  ShahTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: shah-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ShahTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: shah-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.ca-central-1.amazonaws.com/shah-ecr:latest
          PortMappings:
            - ContainerPort: 5000
          Essential: true

  ShahTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # --- ECS Service (DesiredCount: 2) ---
  ShahECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ShahListener
      - ShahTaskDefinition
      - ShahTargetGroup
    Properties:
      Cluster: !Ref ShahECSCluster
      ServiceName: shah-ecs-service
      TaskDefinition: !Ref ShahTaskDefinition
      DesiredCount: 2  # Two containers (Deliverable 7)
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref ShahPrivateSubnet1
            - !Ref ShahPrivateSubnet2
          SecurityGroups:
            - !Ref ShahECSSecurityGroup
      LoadBalancers:
        - ContainerName: shah-container
          ContainerPort: 5000
          TargetGroupArn: !Ref ShahTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  # --- Auto-Scaling (Updated Policy) ---
  ShahScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ShahECSService
    Properties:
      MaxCapacity: 5  # Max 5 (Phase 3)
      MinCapacity: 2  # Min 2 to match DesiredCount
      ResourceId: !Sub service/${ShahECSCluster}/${ShahECSService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Scale-Out Policy (CPU 90% for 2 minutes)
  ShahScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: shah-cpu-scale-out
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ShahScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 90.0  # Scale out at 90% CPU (Phase 3)
        ScaleOutCooldown: 120  # 2 minutes
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  # Scale-In Policy (CPU below 50%)
  ShahScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: shah-cpu-scale-in
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ShahScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0  # Scale in when below 50% (Phase 3)
        ScaleInCooldown: 120  # 2 minutes
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  # --- CodeBuild Role ---
  ShahCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ShahCodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                  - logs:*
                  - s3:*
                Resource: '*'

  # --- CodeBuild Project ---
  ShahCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: shah-codebuild
      ServiceRole: !GetAtt ShahCodeBuildRole.Arn
      Artifacts:
        Type: S3
        Location: shah-codepipeline-artifacts-484907526019
        Name: BuildArtifact
        NamespaceType: NONE
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GitHubOwner}/${GitHubRepo}.git
        BuildSpec: buildspec.yml  # Updated to match the file name

  # --- CodePipeline Role ---
  ShahCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ShahCodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:*
                  - ecs:*
                  - s3:*
                  - iam:PassRole
                Resource: '*'

  # --- CodePipeline ---
  ShahCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - ShahCodeBuildProject
      - ShahECSService
    Properties:
      RoleArn: !GetAtt ShahCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: shah-codepipeline-artifacts-484907526019
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
        - Name: Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref ShahCodeBuildProject
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ClusterName: !Ref ShahECSCluster
                ServiceName: !Ref ShahECSService
                FileName: imagedefinitions.json

Outputs:
  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub http://${ShahLoadBalancer.DNSName}